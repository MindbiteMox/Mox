@using System.Reflection;
@using Mindbite.Mox.Attributes;
@using System.ComponentModel.DataAnnotations
@{
    var modelType = ((object)Model).GetType();
    var formFields = modelType.GetProperties();
    var hiddenFields = new List<System.Reflection.PropertyInfo>();
    var excludedFields = new List<System.Reflection.PropertyInfo>();

    if (typeof(Mindbite.Mox.Core.Models.ISoftDeleted).IsAssignableFrom(modelType))
    {
        var interfaceFields = typeof(Mindbite.Mox.Core.Models.ISoftDeleted).GetProperties().Select(x => x.Name);
        excludedFields.AddRange(formFields.Where(x => interfaceFields.Contains(x.Name)));
    }

    if (typeof(Mindbite.Mox.Core.Models.IUIDEntity).IsAssignableFrom(modelType))
    {
        var interfaceFields = typeof(Mindbite.Mox.Core.Models.IUIDEntity).GetProperties().Select(x => x.Name);
        excludedFields.AddRange(formFields.Where(x => interfaceFields.Contains(x.Name)));
    }

    var hasRenderedFirstField = false;
    var currentFieldSet = default(string);
}

@foreach (var field in formFields.OrderBy(x => x.GetCustomAttribute<MoxFormFieldSetAttribute>(true)?.Order).ThenBy(x => x.GetCustomAttribute<DisplayAttribute>(true)?.GetOrder() ?? 10000))
{
    var fieldSetAttribute = field.GetCustomAttribute<MoxFormFieldSetAttribute>(true);
    if (currentFieldSet != fieldSetAttribute?.Name)
    {
        currentFieldSet = fieldSetAttribute?.Name;
        @Html.Raw("</fieldset>")
        @Html.Raw("<fieldset>")
        <legend>@currentFieldSet</legend>
    }

    if (excludedFields.Contains(field))
    {
        continue;
    }

    if (hiddenFields.Contains(field) || field.GetCustomAttributes(typeof(HiddenInputAttribute), true).Any())
    {
        @Html.Hidden(field.Name)
    }
    else if (field.GetCustomAttributes<MoxFormFieldTypeAttribute>().Any() && (field.PropertyType.IsEnum || (Nullable.GetUnderlyingType(field.PropertyType)?.IsEnum ?? false) || typeof(IEnumerable<SelectListItem>).IsAssignableFrom(field.PropertyType) || field.GetCustomAttributes<MoxFormFieldTypeAttribute>().Any(x => !string.IsNullOrWhiteSpace(x.DataSourcePropertyName))))
    {
        var attribute = field.GetCustomAttribute<MoxFormFieldTypeAttribute>();
        var items = default(SelectListItem[]);

        if (field.PropertyType.IsEnum || (Nullable.GetUnderlyingType(field.PropertyType)?.IsEnum ?? false))
        {
            items = Html.GetEnumSelectList(field.PropertyType).ToArray();
        }
        else
        {
            var dataSourceProperty = formFields.FirstOrDefault(x => x.Name == attribute.DataSourcePropertyName);
            if (dataSourceProperty == null)
            {
                items = ((IEnumerable<SelectListItem>)field.GetValue((object)Model)).ToArray();
            }
            else
            {
                items = ((IEnumerable<SelectListItem>)dataSourceProperty.GetValue((object)Model)).ToArray();
            }
        }

        switch (attribute.Render)
        {
            case Render.DropDown:
                <p>
                    @Html.Label(field.Name)
                    @Html.ValidationMessage(field.Name)
                    @Html.DropDownList(field.Name, items, attribute.EmptyLabel)
                </p>
                break;
            case Render.CheckBoxList:
                <ul class="checkbox">
                    <li><p>@Html.DisplayName(field.Name)</p></li>
                    @for (int i = 0; i < items.Length; i++)
                    {
                        <li>
                            @Html.Hidden($"{field.Name}[{i}].Value", items[i].Value)
                            @Html.Hidden($"{field.Name}[{i}].Text", items[i].Text)
                            @Html.CheckBox($"{field.Name}[{i}].Selected", items[i].Selected)
                            @Html.Label($"{field.Name}[{i}].Selected", items[i].Text)
                        </li>
                    }
                </ul>
                break;
            case Render.Radio:
            default:
                throw new NotImplementedException();
        }
    }
    else
    {
        var renderAttribute = field.GetCustomAttributes<MoxFormFieldTypeAttribute>().FirstOrDefault();

        @if (field.PropertyType == typeof(bool))
        {
            <p class="checkbox">
                @Html.Editor(field.Name)
                @Html.Label(field.Name)
                @Html.ValidationMessage(field.Name)
            </p>
        }
        else
        {
            @if (renderAttribute?.Render == Render.EditorOnly)
            {
                @Html.Editor(field.Name)
            }
            else
            {
                <p>
                    @Html.Label(field.Name)
                    @Html.ValidationMessage(field.Name)

                    @if (!hasRenderedFirstField)
                    {
                        @Html.Editor(field.Name, new { htmlAttributes = new { autofocus = "autofocus" } })
                    }
                    else
                    {
                        @Html.Editor(field.Name)
                    }
                </p>
            }
            hasRenderedFirstField = true;
        }
    }
}
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="&quot;{0}&quot; kunde inte laddas upp! {0}" xml:space="preserve">
    <value>"{0}" could not be uploaded! {0}</value>
  </data>
  <data name="Behåll befintlig fil" xml:space="preserve">
    <value>Keep existing file</value>
  </data>
  <data name="Behåll båda" xml:space="preserve">
    <value>Keep both</value>
  </data>
  <data name="Dina filer har laddats upp!" xml:space="preserve">
    <value>Your files were uploaded!</value>
  </data>
  <data name="En fil med det namnet finns redan" xml:space="preserve">
    <value>A file with this name already exists!</value>
  </data>
  <data name="En mapp med det namnet finns redan" xml:space="preserve">
    <value>A folder with this name already exists</value>
  </data>
  <data name="Filen raderades!" xml:space="preserve">
    <value>File deleted!</value>
  </data>
  <data name="Filnamn" xml:space="preserve">
    <value>File name</value>
  </data>
  <data name="Filtyp" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Följande filer finns redan:" xml:space="preserve">
    <value>These files already exist:</value>
  </data>
  <data name="Ladda ner mapp" xml:space="preserve">
    <value>Download Folder</value>
  </data>
  <data name="Ladda upp" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="Ladda upp filer" xml:space="preserve">
    <value>Upload Files</value>
  </data>
  <data name="Mapp" xml:space="preserve">
    <value>Folder</value>
  </data>
  <data name="Mappar kan inte laddas upp!" xml:space="preserve">
    <value>Directories can not be uploaded!</value>
  </data>
  <data name="Mappen raderades!" xml:space="preserve">
    <value>Folder deleted!</value>
  </data>
  <data name="Mappen skapades!" xml:space="preserve">
    <value>Folder created!</value>
  </data>
  <data name="Mappen är tom" xml:space="preserve">
    <value>This folder is empty</value>
  </data>
  <data name="Mappens namn" xml:space="preserve">
    <value>Folder name</value>
  </data>
  <data name="Ny mapp" xml:space="preserve">
    <value>New Folder</value>
  </data>
  <data name="Ny mapp i {0}" xml:space="preserve">
    <value>New Folder in {0}</value>
  </data>
  <data name="Radera mapp" xml:space="preserve">
    <value>Delete Folder</value>
  </data>
  <data name="Redigera mapp" xml:space="preserve">
    <value>Edit Folder</value>
  </data>
  <data name="Skapa mapp" xml:space="preserve">
    <value>Create folder</value>
  </data>
  <data name="Skriv över filer med samma namn" xml:space="preserve">
    <value>Overwrite</value>
  </data>
  <data name="Släpp dina filer här för att ladda upp" xml:space="preserve">
    <value>Drop files here to upload</value>
  </data>
  <data name="Sök filer och mappar..." xml:space="preserve">
    <value>Search files or folders...</value>
  </data>
  <data name="Sök i alla mappar" xml:space="preserve">
    <value>Search all folders</value>
  </data>
  <data name="Sökväg" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="Toppnivå" xml:space="preserve">
    <value>Top level</value>
  </data>
  <data name="Uppladdad" xml:space="preserve">
    <value>Uploaded</value>
  </data>
  <data name="Vad vill du göra med filerna?" xml:space="preserve">
    <value>What do you want to do with the files?</value>
  </data>
  <data name="{0} fil(er) kommer laddas upp." xml:space="preserve">
    <value>{0} file(s) will be uploaded.</value>
  </data>
  <data name="Överliggande mapp" xml:space="preserve">
    <value>Parent folder</value>
  </data>
</root>
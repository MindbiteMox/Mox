@using Mindbite.Mox.UI 
@using Mindbite.Mox.Extensions
@using Microsoft.Extensions.Localization
@using Microsoft.EntityFrameworkCore

@inject Mindbite.Mox.Identity.Services.RoleGroupManager roleGroupManager
@inject IStringLocalizer localizer

@model Mindbite.Mox.Identity.ViewModels.EditUserViewModel
@{
    Layout = "Mox/_Layout";

    var roleGroups = await roleGroupManager.RoleGroups.OrderBy(x => x.GroupName).ToListAsync();
    var roleGroupSelectList = roleGroups.Select(x => new SelectListItem(x.GroupName, x.Id.ToString()));
}

@await Html.Mox().BreadCrumbsAsync(BreadCrumbMenuReference.Current)
@await Html.PartialAsync("Mox/Identity/_UserSettingsHeader", new { UserId = ViewContext.RouteData.Values["Id"] }.ToExpando())
@Html.Mox().Message()

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <p>
            @Html.LabelFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
            @Html.TextBoxFor(model => model.Name)
        </p>

        <p>
            @Html.LabelFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
            @Html.TextBoxFor(model => model.Email)
        </p>
        
        <p>
            @Html.LabelFor(model => model.RoleGroupId)
            @Html.ValidationMessageFor(model => model.RoleGroupId)
            @Html.DropDownListFor(model => model.RoleGroupId, roleGroupSelectList, localizer["- Välj behörighetsgrupp -"])
        </p>
    </fieldset>

    <fieldset>
        <legend>@localizer["Lösenord"]</legend>

        @Html.CheckBoxFor(x => x.HasPassword, new { style = "display: none" })
        @Html.CheckBoxFor(x => x.WantsPassword, new { style = "display: none" })

        @if (Model.HasPassword)
        {
            <div class="show-if-wantsPassword">
                <p>
                    @Html.LabelFor(model => model.Password)
                    @Html.ValidationMessageFor(model => model.Password)
                    @Html.PasswordFor(model => model.Password, new { autocomplete = "new-password" })
                </p>

                <p>
                    @Html.LabelFor(model => model.RepeatPassword)
                    @Html.ValidationMessageFor(model => model.RepeatPassword)
                    @Html.PasswordFor(model => model.RepeatPassword, new { autocomplete = "new-password" })
                </p>

                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Ta bort lösenord"]</label>
                </p>
            </div>

            <div class="show-if-not-wantsPassword">
                <p>
                    @localizer["{0} kommer endast kunna logga in med autentiseringskod via e-post om lösenordet tas bort.", @Model.Name]
                </p>
                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Ta inte bort lösenord"]</label>
                </p>
            </div>
        }
        else
        {
            <div class="show-if-wantsPassword">
                <p>
                    @Html.LabelFor(model => model.Password)
                    @Html.ValidationMessageFor(model => model.Password)
                    @Html.PasswordFor(model => model.Password, new { autocomplete = "new-password" })
                </p>

                <p>
                    @Html.LabelFor(model => model.RepeatPassword)
                    @Html.ValidationMessageFor(model => model.RepeatPassword)
                    @Html.PasswordFor(model => model.RepeatPassword, new { autocomplete = "new-password" })
                </p>

                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Skapa inte lösenord"]</label>
                </p>
            </div>

            <div class="show-if-not-wantsPassword">
                <p>
                    @localizer["{0} kan endast logga in med autentiseringskod via e-post, ett lösenord måste skapas innan det kan användas för att logga in.", @Model.Name]
                </p>
                
                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Skapa lösenord"]</label>
                </p>
            </div>
        }
    </fieldset>

    <fieldset class="buttons">
        <p>
            <input type="submit" value="@localizer["Spara ändringar"]" />
        </p>
    </fieldset>
}

<style>
    .show-if-wantsPassword,
    .show-if-not-wantsPassword { display: none; }
    #@Html.IdFor(x => x.WantsPassword):checked ~ .show-if-wantsPassword { display: block; }
    #@Html.IdFor(x => x.WantsPassword):not(:checked) ~ .show-if-not-wantsPassword { display: block; }
</style>
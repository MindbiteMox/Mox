@using Mindbite.Mox.Extensions
@using Microsoft.Extensions.Localization;

@model Mindbite.Mox.Identity.ViewModels.EditUserViewModel
@inject IStringLocalizer localizer
@{
    Layout = "Mox/_Layout";
}

@await Html.PartialAsync("Mox/UI/AppBreadCrumbs", new { IncludeCurrentMenu = true }.ToExpando())

@await Html.PartialAsync("Mox/Identity/_UserSettingsHeader", new { UserId = Model.Id }.ToExpando())

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)

    <fieldset>
        <p>
            @Html.LabelFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
            @Html.TextBoxFor(model => model.Name)
        </p>

        <p>
            @Html.LabelFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
            @Html.TextBoxFor(model => model.Email)
        </p>

    </fieldset>
    <fieldset>
        <legend>@localizer["Lösenord"]</legend>

        @Html.CheckBoxFor(x => x.HasPassword, new { style = "display: none" })
        @Html.CheckBoxFor(x => x.WantsPassword, new { style = "display: none" })

        @if (Model.HasPassword)
        {
            <div class="show-if-wantsPassword">
                <p>
                    @Html.LabelFor(model => model.Password)
                    @Html.ValidationMessageFor(model => model.Password)
                    @Html.PasswordFor(model => model.Password, new { autocomplete = "new-password" })
                </p>

                <p>
                    @Html.LabelFor(model => model.RepeatPassword)
                    @Html.ValidationMessageFor(model => model.RepeatPassword)
                    @Html.PasswordFor(model => model.RepeatPassword, new { autocomplete = "new-password" })
                </p>

                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Ta bort lösenord"]</label>
                </p>
            </div>

            <div class="show-if-not-wantsPassword">
                <p>
                    @localizer["{0} kommer endast kunna logga in med magisk e-postlänk om lösenordet tas bort.", @Model.Name]
                </p>
                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Ta inte bort lösenord"]</label>
                </p>
            </div>
        }
        else
        {
            <div class="show-if-wantsPassword">
                <p>
                    @Html.LabelFor(model => model.Password)
                    @Html.ValidationMessageFor(model => model.Password)
                    @Html.PasswordFor(model => model.Password, new { autocomplete = "new-password" })
                </p>

                <p>
                    @Html.LabelFor(model => model.RepeatPassword)
                    @Html.ValidationMessageFor(model => model.RepeatPassword)
                    @Html.PasswordFor(model => model.RepeatPassword, new { autocomplete = "new-password" })
                </p>

                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Skapa inte lösenord"]</label>
                </p>
            </div>

            <div class="show-if-not-wantsPassword">
                <p>
                    @localizer["{0} kan endast logga in med magisk e-postlänk, ett lösenord måste skapas innan det kan användas för att logga in.", @Model.Name]
                </p>
                
                <p>
                    <label for="@Html.IdFor(x => x.WantsPassword)" class="mox-button">@localizer["Skapa lösenord"]</label>
                </p>
            </div>
        }
    </fieldset>

    <fieldset>
        <legend>@localizer["Behörigheter"]</legend>

        @if (Model.RolesDisabled)
        {
            <p>
                @localizer["RolesDisabledDescription"]
                @if (!string.IsNullOrWhiteSpace(Model.RolesDisabledLink))
                {
                <a href="@Model.RolesDisabledLink">@localizer["RolesDisabledLinkTitle"]</a>
                }
            </p>
        }

        <ul class="checkbox" id="js-groups">
            @for (var i = 0; i < Model.Roles.Length; i++)
            {
                <li class="mox-group-depth-@Model.Roles[i].Depth @(Model.Roles[i].IsParent ? "mox-group-parent" : "")">
                    @Html.HiddenFor(model => model.Roles[i].Id)
                    @Html.HiddenFor(model => model.Roles[i].Name)
                    @Html.HiddenFor(model => model.Roles[i].Depth)
                    @Html.HiddenFor(model => model.Roles[i].IsParent)
                    @if (Model.Roles[i].Disabled)
                    {
                        @Html.HiddenFor(x => x.Roles[i].Checked)
                        @Html.CheckBoxFor(model => model.Roles[i].Checked, new { disabled = "disabled" })
                    }
                    else
                    {
                        @Html.CheckBoxFor(model => model.Roles[i].Checked, new { onclick = $"Mox.UI.CheckboxTree.onClick(document.getElementById('js-groups'), this, '{Model.Roles[i].Id}');", data_id = Model.Roles[i].Id })
                    }
                    @Html.LabelFor(model => model.Roles[i].Checked, Model.Roles[i].Name)
                </li>
            }
        </ul>
    </fieldset>
    <fieldset class="buttons">
        <p>
            <input type="submit" value="@localizer["Spara ändringar"]" />
        </p>
    </fieldset>
}

<style>
    .show-if-wantsPassword,
    .show-if-not-wantsPassword { display: none; }
    #@Html.IdFor(x => x.WantsPassword):checked ~ .show-if-wantsPassword { display: block; }
    #@Html.IdFor(x => x.WantsPassword):not(:checked) ~ .show-if-not-wantsPassword { display: block; }
</style>
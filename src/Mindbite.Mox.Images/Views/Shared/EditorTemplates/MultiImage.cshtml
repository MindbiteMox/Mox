@using Microsoft.EntityFrameworkCore
@using Mindbite.Mox.Images
@using Mindbite.Mox.Images.Attributes
@using Microsoft.Extensions.Localization

@inject Mindbite.Mox.Services.IDbContextFetcher contextFetcher
@inject IStringLocalizer localizer
@inject Microsoft.Extensions.Options.IOptions<Mindbite.Mox.Images.MoxImageOptions> options

@model Mindbite.Mox.Images.ViewModels.EditorTemplates.MultiImage
@{
    var context = contextFetcher.FetchDbContext<Mindbite.Mox.Images.Data.IImagesDbContext>();

    var imageUIDs = (Model.Images ?? Array.Empty<Guid>()).ToList();
    var images = (await context.AllImages.Where(x => imageUIDs.Contains(x.UID)).ToListAsync()).OrderBy(x => imageUIDs.IndexOf(x.UID)).ToList();

    var prefix = ViewData.TemplateInfo.HtmlFieldPrefix;

    var uploadUrl = ViewData["UploadUrl"] ?? Url.Action("UploadMulti", "Images", new { Area = Mindbite.Mox.Images.Configuration.MainArea });
    var onUploadChange = $"Mox.Images.uploadMulti('{uploadUrl}', this.form, Mox.Utils.DOM.closest(this, '.multi-image-container').parentElement, '{prefix}')";

    string moveUrl(Guid id, int dir) => ViewData["MoveUrl"] != null ? ((Func<Guid, int, string>)ViewData["MoveUrl"]).Invoke(id, dir) : Url.Action("Move", "Images", new { id, dir, Area = Mindbite.Mox.Images.Configuration.MainArea });
    string onMoveClicked(Guid id, int dir) => $"Mox.Images.updateMulti('{moveUrl(id, dir)}', this.form, Mox.Utils.DOM.closest(this, '.multi-image-container').parentElement, '{prefix}')";

    string removeUrl(Guid id) => ViewData["RemoveUrl"] != null ? ((Func<Guid, string>)ViewData["RemoveUrl"]).Invoke(id) : Url.Action("Remove", "Images", new { id, Area = Mindbite.Mox.Images.Configuration.MainArea });
    string onRemoveClicked(Guid id) => $"Mox.Images.updateMulti('{removeUrl(id)}', this.form, Mox.Utils.DOM.closest(this, '.multi-image-container').parentElement, '{prefix}')";

    var type = context.GetEntityType(Model);
    var sizes = type.GetCustomAttributes(typeof(ImageSizeAttribute), false).Cast<ImageSizeAttribute>().ToList();
    var maxSize = sizes.OrderByDescending(x => x.Width * x.Height).FirstOrDefault();

    var accept = options.Value.FormInputAccept?.Invoke(context.GetEntityType(Model)) ?? "image/*";

    var errors = ViewData["Errors"] as IEnumerable<string>;
}

<div class="multi-image-container">
    @Html.HiddenFor(x => x.ImageTypeFullName)
    <ul class="multi-image-list">
        @for (var i = 0; i < images.Count; i++)
        {
            <li class="multi-image-item">
                <span class="multi-image-image-wrapper">
                    @Html.HiddenFor(x => x.Images[i])
                    <img src="@images[i].DefaultSizeFileUrl" class="multi-image-image" />
                </span>
                <span class="multi-image-buttons">
                    <button type="button" class="mox-button" onclick="@(onMoveClicked(Model.Images[i], -1))" title="@localizer["Flytta upp"]"><i class="mox-icon arrow-left"></i></button>
                    <button type="button" class="mox-button" onclick="@(onMoveClicked(Model.Images[i],  1))" title="@localizer["Flytta ner"]"><i class="mox-icon arrow-right"></i></button>
                    <button type="button" class="mox-button" onclick="@(onRemoveClicked(Model.Images[i]))" title="@localizer["Ta bort"]"><i class="mox-icon trash"></i></button>
                </span>
            </li>
        }
        <li class="multi-image-item">
            <label class="multi-image-label" for="@Html.IdFor(x => x.Upload)">
                <span>
                    @localizer["Välj bild(er)"]
                    @if(maxSize != null)
                    {
                        <br />
                        if(maxSize.Width > 0 && maxSize.Height > 0)
                        {
                            <span class="multi-image-size-label">@localizer["Minst {0}x{1}px", maxSize.Width, maxSize.Height]</span>
                        }
                        else if(maxSize.Width > 0)
                        {
                            <span class="multi-image-size-label">@localizer["Minst {0}px bred", maxSize.Width]</span>
                        }
                        else if(maxSize.Height > 0)
                        {
                            <span class="multi-image-size-label">@localizer["Minst {0}px hög", maxSize.Height]</span>
                        }
                    }
                </span>
                <input type="file" class="multi-image-input" multiple name="@Html.NameFor(x => x.Upload)" id="@Html.IdFor(x => x.Upload)" onchange="@onUploadChange" accept="@accept" />
            </label>
        </li>
    </ul>

    @if (errors?.Any() ?? false)
    {
        <p>
            @foreach (var error in errors ?? Enumerable.Empty<string>())
            {
                <span class="field-validation-error">@error</span>
            }
        </p>
    }
</div>